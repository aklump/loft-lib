var tipuesearch = {"pages":[{"title":"Changelog","text":"All notable changes to this project will be documented in this file.\n\nThe format is based on Keep a Changelog, and this project adheres to Semantic Versioning.\n\n\n\n\n\nRemoved\n\n\nThe following files are too complicated to use and there are other options out there, so they were removed in 2.0. You will need to rewrite with one of those.\n\\AKlump\\LoftLib\\Storage\\FilePath\n\\AKlump\\LoftLib\\Storage\\FilePathCollection\n\\AKlump\\LoftLib\\Storage\\PersistentInterface\n\n\nAdded\n\n\nSupport for PHP ^8.0\n\n\nChanged\n\n\nThe return value of \\AKlump\\LoftLib\\Code\\LoftXmlElement::addAttribute is now void, so you can no longer chain this method, if you had done so.  Search your codebase for chaining and fix!\nMinimum PHP increased to ^7.3\n\n\n\n\nAdded\n\n\nNew interface \\AKlump\\LoftLib\\Code\\ShortCodesInterface\nNew method Arrays::getClosestValueTo()\n\n\n\n\nAdded\n\n\nBash::confirm() for user input collection.\n\n\n\n\nAdded\n\n\nShortcodes with &amp;nbsp; work as if , i.e., [foo&amp;nbsp;id=\"5\"]lorem[\/foo] is the same as [foo id=\"5\"]lorem[\/foo]. In earlier versions &amp;nbsp; was not supported.\n\n\n\n\nChanged\n\n\nMinimum PHP is now 7.1\n\n\n\n\nChanged\n\n\nDue to a design flaw in the Bash\\Configuration a new class has replaced the old that hashes the variable names. This should be used moving forward but requires code refactoring. If you do not want to refactor code then use the new deprecated new class Bash\\LegacyConfiguration. Otherwise refactor your code to take advantage of the design correction.\n\n\nFixed\n\n\nProblem with Bash variable names and special chars by rewriting \\AKlump\\LoftLib\\Bash\\Configuration.\n\n\n\n\nChanged\n\n\nUpdated tests to work with PHPUnit 6.x, 7.x","tags":"","url":"CHANGELOG.html"},{"title":"In the Loft Studios Library","text":"A collection of open source code provided by In the Loft Studios, LLC.","tags":"","url":"README.html"},{"title":"Dataset","text":"An PHP class to use for data objects, using JSON schema as a validation structure.\n\n\n\n\nCreate a class that extends Dataset.\nNow define the json schema.  A simple method is to supply a class constant JSON_SCHEMA with the schema value:\n\nclass SimpleExample extends Dataset {\n\n  const JSON_SCHEMA = '{\"type\": \"object\",\"required\":[\"id\"],\"id\":{\"type\":\"integer\"},\"version\":{\"type\":\"string\",\"default\":\"1.2.5\"}}';\n\n}  \n\nMost times however, your schema will live in a separate file.  Therefore you will not define the class constant JSON_SCHEMA, rather provide the path to the json schema as the return value of the public static method pathToJsonSchema.  You may follow the convention of appending .schema.json to the classname, if you wish, as shown here:\n\n\/**\n * {@inheritdoc}\n *\/\nprotected static function pathToJsonSchema() {\n  return __DIR__ . '\/DatasetAlpha.schema.json';\n}\n\nNow create a json schema file to define your dataset at the path defined above.\n\n\nBe aware that when you use the pattern keyword to define a regex expression that you do NOT include the delimiters like you do in PHP's preg_match.  This is corrent JSON: \"pattern\": \"\\\\?[^#]+\", notice there are no delimiters.\n\nThen implement an instance in your code like this:\n\n&lt;?php\n$data = ['id' =&gt; 123];\n...\ntry {\n    $timer = Timer::dataset($data)-&gt;validate()-&gt;throwFirstProblem();\n} catch (\\Exception $exception) {\n    \/\/ Do something if validation failed.\n}\n\n\n\nUsing PHP class members in your JSON code with static::\n\nYou can provide class methods, constants, etc in your JSON schema files and they will be evaluated at runtime.  For example, here we provide the regex pattern for the date property with a class constant, and the default value with a class method.  The cornerstone of this process is that the value begin with static::.\n\n    \"date\": {\n        \"type\": \"string\",\n        \"default\": \"static::defaultDate()\",\n        \"pattern\": \"static::REGEX_DATEISO8601\"\n    },\n\n\n\n\n\nGet the complete dataset as an array (sorted, with defaults, etc): $array = $data-&gt;get()\nGet the JSON value of the dataset by casting to a string: $json = strval($data).\nUse a property directly: $id = $data-&gt;id\nUse a property's alias directly: $id = $data-&gt;userId.  Read about aliases for more info.\n\n\n\n\n\nGet the default for single key: Timer::getDefault('id').\nGet an array of defaults: Timer::getDefaults()\n\n\n\n\n\nReturn an array of all: $data-&gt;getProblems.\nThrow an \\InvalidArgumentException with the first problem: $data-&gt;throwFirstError\n\n\n\n\n\nYou can alter a single key using ::mutate.\n\n\n\n\nYou may have aliases for property keys, which means you can access the same value using any of a number of keys.  To define an alias use colon separation as seen below:\n\n{\n    ...\n    \"properties\": {\n        \"mi:me:moi\": {\n            \"default\": \"myself\",\n            \"type\": \"string\",\n            \"pattern\": \"\/^m.+\/\"\n        },\n\n\n\n\n\nIf you have advanced validation beyond what comes for free, you may extend validate(), but read the docs there for what needs to happen.\nConsider using ignoreKey() instead, if possible.\n\n\n\n\nprotected static function ignoreKey($key)\n{\n    return $key === 'duration';\n}\n\nprotected static function ignoreKey($key)\n{\n    return strpos($key, '#') === 0;\n}\n\n\n\n\n\nTo ignore some keys use static::ignoreKey() in your class.\n\n\n\n\nAuto-generate Values: Example 1\n\nThe time to do this is during ::import.\n\n&lt;?php\n\n\/**\n * Import extra data based on a default value.\n *\n * In this example, the defaults set the user id by global var.  During import\n * we check for a user_id, either by import $data or the default data.  Then we\n * make sure the the $original import data doesn't contain session_id, and if\n * so we pull that data from the user account object.\n *\/\nclass Alpha extends Dataset {\n\n  ... \n\n  \/**\n   * {@inheritdoc}\n   *\/\n  protected static function defaults() {\n    global $user;\n\n    return [\n      'user_id' =&gt; $user-&gt;uid,\n      'session_id' =&gt; -1,\n    ];\n  }\n\n  \/**\n   * {@inheritdoc}\n   *\/\n  public function import($data) {\n    $original = $data;\n    $data += static::getDefaults();\n\n    \/\/ Figure the session id based on the last time the user logged in.\n    \/\/ https:\/\/amplitude.zendesk.com\/hc\/en-us\/articles\/115002323627-Sessions\n    if ($data['user_id'] &amp;&amp; empty($original['session_id'])) {\n      $account = user_load($data['user_id']);\n\n      \/\/ We will count our session based on last login.\n      \/\/ https:\/\/drupal.stackexchange.com\/questions\/21864\/whats-the-difference-between-user-login-and-access#21873\n      $data['session_id'] = $account-&gt;login * 1000;\n    }\n\n    return parent::import($data);\n  }\n\n}","tags":"","url":"dataset.html"},{"title":"Developing This Package","text":"To develop with different php versions you can use bin\/setup_php*.sh files. They relay on MAMP being used but if you study them you could see how to use some other PHP provider.\nTo run tests: .\/bin\/run_unit_tests.sh.\nTo get code coverage .\/bin\/run_unit_tests.sh --coverage-html=reports\/coverage.\n\n\n\n\nbump build will compile docs, test all supported PHP versions, and create all distribution files.","tags":"","url":"developers.html"},{"title":"Search Results","text":"","tags":"","url":"search--results.html"}]};
